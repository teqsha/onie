import { Image, StyleSheet, TouchableOpacity, Text, TextInput, View } from 'react-native';
import React, { useState } from 'react';
import { Formik } from 'formik';
import { SignupInitialValue, SignupValidationSchema } from './utils';
import { useNavigation } from '@react-navigation/native';
import Icon from 'react-native-vector-icons/Ionicons';


const Signup = () => {
 const navigation = useNavigation();
  const [hidePassword, setHidePassword] = useState(true);

  const handleSignup = (values) => {
    console.log(values);
    console.log('Signup Details:');
    console.log('Username:', values.Username);
    console.log('Password:', values.password);
    console.log('Confirm Password:', values.confirmPassword);
    console.log('Email Address:', values.emailAddress);
  };

  return (
    <View style={{ alignItems: 'center' }}>
      <Text style={styles.welcomeText}>Signup</Text>
      <Text style={styles.Text}>Sign in to your account!</Text>
      <Formik
        initialValues={SignupInitialValue}
        validationSchema={SignupValidationSchema}
        onSubmit={handleSignup}>
        {({
          handleSubmit,
          handleChange,
          handleBlur,
          values,
          touched,
          errors,

        }) => (
          <View>
            <TextInput
              style={styles.textinput}
              placeholder="Username"
              onChangeText={handleChange('Username')}
              onBlur={handleBlur('Username')}
              value={values.Username}
            />
            {errors.Username && touched.Username && (
              <Text style={styles.errorText}>{errors.Username}</Text>
            )}
            
            <View style={{ position: 'relative' }}>
              <TextInput
                style={styles.textinput}
                placeholder="Password"
                onChangeText={handleChange('password')}
                onBlur={handleBlur('password')}
                value={values.password}
                secureTextEntry={hidePassword}
              />
              {errors.Username && touched.Username && (
                <Text style={styles.errorText}>{errors.Username}</Text>
              )}
              <TouchableOpacity
                style={styles.hidePasswordIcon}
                onPress={() => setHidePassword(!hidePassword)}>
                <Icon
                  name={hidePassword ? 'eye-off' : 'eye-outline'}
                  size={24}
                  color={'#333'}
                />
              </TouchableOpacity>
               <View>
            <TextInput
              style={styles.textinput}
              placeholder="Confirm New Password"
              onChangeText={handleChange('confirm New Password')}
              onBlur={handleBlur('confirm New Password')}
              value={values.confirmPassword}
             />
            {errors.Username && touched.Username && (
              <Text style={styles.errorText}>{errors.Username}</Text>
            )}
            <TouchableOpacity
                style={styles.hidePasswordIcon}
                onPress={() => setHidePassword(!hidePassword)}>
                <Icon
                  name={hidePassword ? 'eye-off' : 'eye-outline'}
                  size={24}
                  color={'#333'}
                />
              </TouchableOpacity>

             <View style={{ position: 'relative' }}>
              <TextInput
                style={styles.textinput}
                placeholder="Email Address"
                onChangeText={handleChange('email Address')}
                onBlur={handleBlur('email Address')}
                value={values.emailAddress}
                secureTextEntry={hidePassword}
              />
            </View>
            {errors.password && touched.password && (
              <Text style={styles.errorText}>{errors.password}</Text>
            )}

            <TouchableOpacity   onPress={() =>{[navigation.navigate('LoginScreen'),{handleSubmit}]}}>
              <Text style={styles.signInText}>Signup</Text>
            </TouchableOpacity>
            <TouchableOpacity>
              <Text style={styles.forgotPasswordText}>Forgot password?</Text>
            </TouchableOpacity>
          </View>
          </View>
          </View>
        )}
      </Formik>

      <View style={{ flexDirection: 'row', marginTop: 10 }}>
        <Text>have an account? </Text>
        <TouchableOpacity onPress={() => navigation.navigate('LoginScreen')}>
          <Text style={{ color: '#3797FE' }}>Login</Text>
        </TouchableOpacity>
      </View>
    </View>
    

  );
};


const styles = StyleSheet.create({
  textinput: {
    justifyContent: 'center',
    borderColor: 'grey',
    width: 350,
    height: 50,
    alignSelf: 'center',
    margin: 5,
    padding: 10,
    borderWidth: 1,
    borderRadius: 5,
  },
  signInText: {
    color: 'white',
    textAlign: 'center',
    alignSelf: 'center',
    fontSize: 18,
    backgroundColor: '#3797FE',
    width: 350,
    height: 50,
    margin: 10,
    padding: 10,
    borderRadius: 8,
  },
  forgotPasswordText: {
    color: '#3797FE',
    marginTop: 5,
  },
  hidePasswordIcon: {
    position: 'absolute',
    right: 20,
    top: 15,
  },
  welcomeText: {
    fontSize: 65,
    textAlign: 'center',
    fontWeight: '500',
    color: '#262626',
  },
  Text: {
    color: 'black',
    textAlign: 'center',
    fontSize: 20,
    marginBottom: 20,
  },
  errorText: {
    color: 'red',
    paddingLeft: 15,
    fontSize: 14,
  },

});

export default Signup;


import { Image, StyleSheet, TouchableOpacity, Text, TextInput, View } from 'react-native';
import React, { useState } from 'react';
import { Formik } from 'formik';
import { SignupInitialValue, SignupValidationSchema } from './utils';
import { useNavigation } from '@react-navigation/native';
import Icon from 'react-native-vector-icons/Ionicons';

const  Signup = () => {
 const navigation = useNavigation();
  const [hidePassword, setHidePassword] = useState(true);
  const [hideConfirmPassword, setHideConfirmPassword] = useState(true);
   const handleSignup = (values) => {
    console.log("Signup Details:");
    console.log("Username:", values.Username);
    console.log("Password:", values.password);
    console.log("Confirm Password:", values.confirmPassword);
    console.log("Mobile Number:", values.number);
  };
  

  return (
    <View style={{ alignItems: 'center' }}>
      <Text style={styles.headingTitle}>Sign up with your mobile number</Text>
      <Formik
        initialValues={SignupInitialValue}
        validationSchema={SignupValidationSchema}
        onSubmit={handleSignup}>
        {({
          handleChange,
          handleBlur,
          handleSubmit,
          values,
          touched,
          errors,
        }) => (
          <View>
            <Text style={styles.Title}>Enter email</Text>
            <TextInput
              style={styles.textinput}
              placeholder="Username"
              onChangeText={handleChange('Username')}
              onBlur={handleBlur('Username')}
              value={values.Username}
            />
            {errors.Username && touched.Username && (
              <Text style={{ color: 'red', paddingLeft: 15 }}>
                {errors.Username}
              </Text>
            )}
            <Text style={styles.Title}>Create password</Text>
          <View style={{ position: 'relative' }}>
            <TextInput
              style={styles.textinput}
              placeholder="Password"
              onChangeText={handleChange('password')}
              onBlur={handleBlur('password')}
              value={values.password}
              secureTextEntry={true}
            />
              <TouchableOpacity
                style={styles.hidePasswordIcon}
                onPress={() => setHidePassword(!hidePassword)}>
                <Icon
                  name={hidePassword ? 'eye-off-outline' : 'eye-outline'}
                  size={24}
                  color={'#333'}
                />
              </TouchableOpacity>
            </View>
            {errors.password && touched.password && (
              <Text style={{ color: 'red', paddingLeft: 15 }}>
                {errors.password}
              </Text>
            )}
            <Text style={styles.Title}>Confirm password</Text>
          <View style={{ position: 'relative' }}>
            <TextInput
              style={styles.textinput}
              placeholder="Confirm Password"
              onChangeText={handleChange('confirmPassword')}
              onBlur={handleBlur('confirmPassword')}
              value={values.confirmPassword}
              secureTextEntry={true}
            />
              <TouchableOpacity
                style={styles.hidePasswordIcon}
                onPress={() => setHideConfirmPassword(!hideConfirmPassword)}>
                <Icon
                  name={hideConfirmPassword ? 'eye-off-outline' : 'eye-outline'}
                  size={24}
                  color={'#333'}
                />
              </TouchableOpacity> 
            </View>
            {errors.confirmPassword && touched.confirmPassword && (
              <Text style={{ color: 'red', paddingLeft: 15 }}>
                {errors.confirmPassword}
              </Text>
            )}
            <Text style={styles.Title}>Mobile Number</Text>
            <TextInput
              style={styles.textinput}
              placeholder="Mobile Number"
              onChangeText={handleChange('number')}
              onBlur={handleBlur('number')}
              value={values.number}
              keyboardType="number-pad"
              maxLength={10}
            />
            {errors.number && touched.number && (
              <Text style={{ color: 'red', paddingLeft: 15 }}>
                {errors.number}
              </Text>
            )}
            <TouchableOpacity onPress={() =>{[ navigation.navigate('HomeScreen'),{handleSubmit}]}}>
            {/* <TouchableOpacity onPress={handleSubmit}> */}
              <Text style={styles.signupText}>Sign up</Text>
            </TouchableOpacity>
          </View>
        )}
      </Formik>
      <View style={{ flexDirection: 'row', marginTop: 10 }}>
        <Text>Have an account? </Text>
        <TouchableOpacity onPress={() => navigation.navigate('Login')}>
          <Text style={{ color: '#3797FE' }}>Sign in</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  headingTitle: {
    fontSize: 22,
    fontWeight: '700',
    margin: 20,
    height: 50,
  },
  textinput: {
    justifyContent: 'center',
    borderColor: 'grey',
    width: 350,
    alignSelf: 'center',
    margin: 5,
    height: 50,
    padding: 10,
    borderWidth: 1,
    borderRadius: 5,
  },
  signupText: {
    color: 'white',
    textAlign: 'center',
    alignSelf: 'center',
    fontSize: 18,
    backgroundColor: '#3797FE',
    width: 350,
    height: 50,
    margin: 10,
    padding: 10,
    borderRadius: 8,
  },
  Title: {
    fontSize: 15,
    margin: 4,
    paddingLeft: 5,
  },
  hidePasswordIcon: {
    position: 'absolute',
    right: 20,
    top: 15,
  },
});

export default Signup;

..........PostScreen.tsx.........

// import React, { useState, useEffect } from "react";
// import { View,Text, TouchableOpacity,Image,TextInput,Alert, StyleSheet } from "react-native";
// import Video from "react-native-video";
// import Icon from "react-native-vector-icons/MaterialCommunityIcons";
// import { useUpload } from "../Upload/UploadContext";

// const PostScreen = ({ route, navigation }) => {
//   const item = route.params || {}; 
//   const { startUpload } = useUpload();
//   const [caption, setCaption] = useState("");
//   const [isVideo, setIsVideo] = useState(false); 
//   const { file_uri } = route.params; 
//   const { thumb_uri } = route.params;

//     useEffect(() => {
//     console.log("Received Data:", route.params);
//     if (item?.file_uri) {
//       const fileType = item.file_uri.split(".").pop().toLowerCase();
//       setIsVideo(["mp4", "mov", "avi", "mkv"].includes(fileType));
//     }
//   }, [route.params]);

//   if (!file_uri) {
//     return ( 
//      <View>
//         <Text>No media available</Text>
//       </View>
//     )
//   }

//   return (
//     <View style={styles.container}>
//       <Video
//         source={{ uri: file_uri }} 
//         style={styles.video}
//         resizeMode="contain"
//         repeat={true}
//         muted={false}
//         paused={false} 
//         onError={(e) => console.log("Video Error:", e)}
//        />
//      <View style={styles.header}>
//        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>
//         <Icon name="keyboard-backspace" size={30} color="white" />
//        </TouchableOpacity>
//          <Text style={styles.title}>New Post</Text>
//            <TouchableOpacity onPress={() => Alert.alert("More Information")} style={styles.menuButton}>
//              <Icon name="dots-horizontal" size={30} color="white" />
//            </TouchableOpacity>
//        </View>

//        <TextInput
//         style={styles.captionInput}
//         placeholder="Write a caption..."
//         placeholderTextColor="#999"
//         value={caption}
//         onChangeText={setCaption}
//       />

//       <TouchableOpacity
//         style={styles.postButton}
//         onPress={() => {
//           console.log("Posting:", { file: item.file_uri, caption });
//           // Alert.alert("Upload", "Upload successful");
//           if (typeof startUpload === "function") {
//             startUpload(item.file_uri, item.thumb_uri, caption);
//           } else {
//             console.error("startUpload is not defined or not a function");
//           }
//           navigation.goBack();
//         }}
//       >
//         <Text style={styles.postText}>Post</Text>
//       </TouchableOpacity>
//     </View>
//   );
// };

// const styles = StyleSheet.create({
//   container: { 
//     flex: 1, 
//     backgroundColor: "black", 
//     justifyContent: "center", 
//     alignItems: "center" },
//   video: { 
//     width: "100%", 
//     height: "100%"
//    },
//   header: {
//         position: "absolute",
//         top: 10,
//         left: 0,
//         right: 0,
//         flexDirection: "row",
//         justifyContent: "space-between",
//         alignItems: "center",
//         paddingHorizontal: 15,
//         zIndex: 10,
//       },
//       backButton: {
//         padding: 10,
//       },
//       backText: {
//         color: "#fff",
//         fontSize: 20,
//       },
//       title: {
//         color: "#fff",
//         fontSize: 18,
//         fontWeight: "bold",
//       },
//       menuButton: {
//         padding: 10,
//       },
//       menuText: {
//         color: "#fff",
//         fontSize: 20,
//       },
//       captionInput: {
//         position: "absolute",
//         bottom: 20,
//         left: 10,
//         right: 90,
//         borderWidth: 1,
//         color: "#ddd",
//         fontSize: 15,
//         padding: 10,
//         borderRadius: 10,
//         zIndex: 10, 
//         borderTopWidth: 1,
//         borderTopColor: "#ddd",
//       },
//       postButton: {
//         position: "absolute",
//         bottom: 20,
//         right: 10,
//         backgroundColor: "#007AFF",
//         paddingVertical: 10,
//         paddingHorizontal: 20,
//         borderRadius: 10,
//         zIndex: 10, 
//       },
//       postText: {
//         color: "#fff",
//         fontSize: 16,
//         fontWeight: "bold",
//       },
// });

// export default PostScreen;

import React, {useState,useEffect} from 'react';
import {Image, View, TextInput, StyleSheet,TouchableOpacity,Text,Alert} from 'react-native';
import {useRoute} from '@react-navigation/native';
import {useUpload} from './UploadContext'
import Video from "react-native-video";
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
import { useNavigation } from '@react-navigation/native';

type uriData = {
  thumb_uri: string;
  file_uri: string;
};

const PostScreen = () => {
  const data = useRoute();
  const item = data?.params as uriData;
  const [caption, setCaption] = useState('');
  const [isVideo, setIsVideo] = useState(false); 
  const {startUpload} = useUpload();
  const navigation = useNavigation();
  const { file_uri } = item; 
  const { thumb_uri } = item;

   useEffect(() => {
    console.log("Received Data:", data.params);
    if (item?.file_uri) {
      const fileType = item.file_uri.split(".").pop()?.toLowerCase();
      setIsVideo(["mp4", "mov", "avi", "mkv"].includes(fileType || ""));
    }
  }, [item]);

  if (!file_uri) {
    return ( 
     <View>
        <Text>No media available</Text>
      </View>
    )
  }
  return (
    <View style={styles.container}>
      <Video
        source={{ uri: file_uri }} 
        style={styles.video}
        resizeMode="contain"
        repeat={true}
        muted={false}
        paused={false} 
        onError={(e) => console.log("Video Error:", e)}
       />
       <View style={styles.header}>
            <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>
             <Icon name="keyboard-backspace" size={30} color="white" />
            </TouchableOpacity>
              <Text style={styles.title}>New Post</Text>
                <TouchableOpacity onPress={() => Alert.alert("More Information")} style={styles.menuButton}>
                  <Icon name="dots-horizontal" size={30} color="white" />
                </TouchableOpacity>
            </View>
       
          <Image source={{uri: item?.thumb_uri}} style={styles.img} />
          <TextInput
           style={styles.captionInput}
           placeholder="Write a caption..."
           placeholderTextColor="#999"
           value={caption}
           onChangeText={setCaption}
          />
         
         <TouchableOpacity
        style={styles.postButton}
        onPress={() => {
          console.log("Posting:", { file: item.file_uri, caption });
          Alert.alert("Upload", "Upload successful");
          if (typeof startUpload === "function") {
            startUpload(item.file_uri, item.thumb_uri, caption);
          } else {
            console.error("startUpload is not defined or not a function");
          }
          navigation.goBack();
        }}
      >
        <Text style={styles.postText}>Post</Text>
      </TouchableOpacity>
   </View>
  );
};

const styles = StyleSheet.create({
  container: { 
    flex: 1, 
    backgroundColor: "black", 
    justifyContent: "center", 
    alignItems: "center"
  },
  captionInput: {
    position: "absolute",
    bottom: 20,
    left: 10,
    right: 90,
    borderWidth: 1,
    color: "#ddd",
    fontSize: 15,
    padding: 10,
    borderRadius: 10,
    zIndex: 10, 
    borderTopWidth: 1,
    borderTopColor: "#ddd",
  },
  img: {
    width: '25%',
    height: 150,
    resizeMode: 'cover',
    borderRadius: 10,
  },
  video: { 
    width: "100%", 
    height: "100%"
  },
  textArea: {
    height: 150,
    textAlignVertical: 'top',
  },
  postButton: {
    position: "absolute",
    bottom: 20,
    right: 10,
    backgroundColor: "#007AFF",
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 10,
    zIndex: 10, 
  },
    postText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "bold",
  },
  header: {
    position: "absolute",
    top: 10,
    left: 0,
    right: 0,
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingHorizontal: 15,
    zIndex: 10,
  },
    backButton: {
    padding: 10,
  },
    backText: {
    color: "#fff",
    fontSize: 20,
  },
    title: {
    color: "#fff",
    fontSize: 18,
    fontWeight: "bold",
  },
    menuButton: {
    padding: 10,
  },
    menuText: {
    color: "#fff",
    fontSize: 20,
  },
});

export default PostScreen;


